#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <stdbool.h>

// elide start
/* The "elide" above is honored when including this source
   in homework assignments like locality.pdf */
#include <errno.h>
// elide stop

#include "assert.h"
#include "a2methods.h"
#include "a2plain.h"
#include "a2blocked.h"
#include "pnm.h"
// elide start
#include "arotate.h"
// elide stop

static void
usage(const char *progname)
{
        fprintf(stderr, "Usage: %s [-rotate <angle>] "
                "[-{row,col,block}-major] [filename]\n",
                progname);
        exit(1);
}

int main(int argc, char *argv[]) 
{
        char *time_file_name = NULL;
        int   rotation = 0;
        int   i;

        /* default to UArray2 methods */
        A2Methods_T methods = uarray2_methods_plain; 
        assert(methods);

        /* default to best map */
        A2Methods_mapfun *map = methods->map_default; 
        assert(map);

#define SET_METHODS(METHODS, MAP, WHAT) do {                            \
                methods = (METHODS);                                    \
                assert(methods != NULL);                                \
                map = methods->MAP;                                     \
                if (map == NULL) {                                      \
                        fprintf(stderr, "%s does not support "          \
                                        WHAT "mapping\n",               \
                                argv[0]);                               \
                        exit(1);                                        \
                }                                                       \
        } while (false)

        for (i = 1; i < argc; i++) {
                if (strcmp(argv[i], "-row-major") == 0) {
                        SET_METHODS(uarray2_methods_plain, map_row_major,
                                    "row-major");
                } else if (strcmp(argv[i], "-col-major") == 0) {
                        SET_METHODS(uarray2_methods_plain, map_col_major,
                                    "column-major");
                } else if (strcmp(argv[i], "-block-major") == 0) {
                        SET_METHODS(uarray2_methods_blocked, map_block_major,
                                    "block-major");
                } else if (strcmp(argv[i], "-rotate") == 0) {
                        if (!(i + 1 < argc)) {      /* no rotate value */
                                usage(argv[0]);
                        }
                        char *endptr;
                        rotation = strtol(argv[++i], &endptr, 10);
                        if (!(rotation == 0 || rotation == 90
                              || rotation == 180 || rotation == 270)) {
                                fprintf(stderr, "Rotation must be "
                                        "0, 90 180 or 270\n");
                                usage(argv[0]);
                        }
                        if (!(*endptr == '\0')) {    /* Not a number */
                                usage(argv[0]);
                        }
                } else if (strcmp(argv[i], "-time") == 0) {
                        time_file_name = argv[++i];
                } else if (*argv[i] == '-') {
                        fprintf(stderr, "%s: unknown option '%s'\n", argv[0],
                                argv[i]);
                } else if (argc - i > 1) {
                        fprintf(stderr, "Too many arguments\n");
                        usage(argv[0]);
                } else {
                        break;
                }
        }

        // ...
// elide start
        Pnm_ppm ppm;    /* original pixmap as read from the input */
        if (i < argc) {
                FILE *fp = fopen(argv[i], "r");
                if (fp == NULL) {
                        perror(argv[i]);
                        exit(1);
                }
                ppm = Pnm_ppmread(fp, methods);
                fclose(fp);
        } else {
                ppm = Pnm_ppmread(stdin, methods);
        }
        A2Methods_UArray2 orig = ppm->pixels; /* image before rotation */
        A2Methods_UArray2 rot  = NULL;        /* image after rotation  */

        switch(rotation) {
        case 0:   rot = orig; break;
        case 90:  rot = rotate_cw (methods, orig, map); break;
        case 180: rot = rotate_180(methods, orig, map); break;
        case 270: rot = rotate_ccw(methods, orig, map); break;
        default:  assert(false); break;
        }
        assert(rot != NULL);
        if (rot != orig) {     /* set ppm to hold the new image */
                assert(orig == ppm->pixels);
                methods->free(&ppm->pixels);
                ppm->pixels = rot;
                ppm->width  = methods->width(rot);
                ppm->height = methods->height(rot);
        }
        Pnm_ppmwrite(stdout, ppm);
        Pnm_ppmfree(&ppm);
        (void) time_file_name;  /* solutions don't create timing data */
        return EXIT_SUCCESS;
// elide stop
}
